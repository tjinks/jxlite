package uk.co.cleopatra.xmlmap;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.HashMap;
import java.util.Map;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

class UnmarshallerImpl implements Unmarshaller {

	private Map<Method, ProxyableGetMethod> methodMap;
	private final Class<?> instanceType;

	private static class InvocationHandlerImpl implements InvocationHandler {
		private final HashMap<Method, Object> cachedResults = new HashMap<Method, Object>();

		InvocationHandlerImpl(Map<Method, ProxyableGetMethod> methodMap,
				Element element) {
			super();
			for (Map.Entry<Method, ProxyableGetMethod> entry : methodMap
					.entrySet()) {
				Object value = entry.getValue().get(element);
				cachedResults.put(entry.getKey(), value);
			}
		}

		@Override
		public Object invoke(Object proxy, Method method, Object[] args)
				throws Throwable {
			if (!cachedResults.containsKey(method)) {
				throw new UnsupportedOperationException("Method "
						+ method.getName()
						+ "() is not mapped to an XML element or attribute");
			}
			return cachedResults.get(method);
		}
	}

	UnmarshallerImpl(Class<?> instanceType) {
		super();
		this.instanceType = instanceType;
	}

	void setMethodMap(Map<Method, ProxyableGetMethod> methodMap) {
		this.methodMap = methodMap;
	}

	@Override
	public Object unmarshal(final Element element) {
		InvocationHandler invocationHandler = new InvocationHandlerImpl(
				methodMap, element);
		return Proxy.newProxyInstance(instanceType.getClassLoader(),
				new Class[] { instanceType }, invocationHandler);
	}
	
	@Override
	public Object unmarshal(Document doc) {
		return unmarshal(doc.getDocumentElement());
	}

}
