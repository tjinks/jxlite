package uk.co.cleopatra.xmlmap;

import java.lang.reflect.Method;
import java.lang.reflect.ParameterizedType;
import java.lang.reflect.Type;
import java.util.List;
import java.util.Set;

import javax.xml.namespace.NamespaceContext;
import javax.xml.xpath.XPathExpression;

import org.w3c.dom.Element;

class ProxyableGetMethodFactory {

	private final ProxyFactoryBuilder proxyFactoryBuilder;

	@SuppressWarnings("serial")
	private static class InvalidReturnTypeException extends Exception {
		InvalidReturnTypeException() {
			super();
		}
	}

	private static class ProxyableGetMethodImpl implements ProxyableGetMethod {

		private final XPathConverter converter;

		ProxyableGetMethodImpl(XPathExpression xPathExpression,
				Multiplicity multiplicity, CollectionType collectionType,
				NodeConverter nodeConverter) {
			converter = new XPathConverter(xPathExpression, multiplicity,
					collectionType, nodeConverter);
		}

		@Override
		public Object get(Element context) {
			return converter.convert(context);
		}
	}

	private final XPathCompiler xPathCompiler;
	private final NamespaceContext namespaceContext;

	ProxyableGetMethodFactory(ProxyFactoryBuilder proxyFactoryBuilder,
			XPathCompiler xPathCompiler, NamespaceContext namespaceContext) {
		this.xPathCompiler = xPathCompiler;
		this.namespaceContext = namespaceContext;
		this.proxyFactoryBuilder = proxyFactoryBuilder;
	}

	ProxyableGetMethod methodFor(Method method) {
		try {
			Path pathAnnotation = method.getAnnotation(Path.class);
			if (pathAnnotation == null) {
				return null;
			}
			if (method.getParameterTypes().length > 0) {
				throw new XmlMapException("Method " + method.getName()
						+ " cannot take parameters");
			}
			boolean required = (method.getAnnotation(Required.class) != null);
			Type returnType = method.getGenericReturnType();
			CollectionType collectionType = getCollectionType(returnType);
			Multiplicity multiplicity;
			switch (collectionType) {
			case NONE:
				multiplicity = (required ? Multiplicity.EXACTLY_ONE
						: Multiplicity.ZERO_OR_ONE);
				break;
			default:
				multiplicity = (required ? Multiplicity.ONE_OR_MORE
						: Multiplicity.ZERO_OR_MORE);
				break;
			}
			NodeConverter nodeConverter = getNodeConverter(returnType);
			XPathExpression xPathExpression = xPathCompiler.compile(
					pathAnnotation.value(), namespaceContext);
			return new ProxyableGetMethodImpl(xPathExpression, multiplicity,
					collectionType, nodeConverter);
		} catch (InvalidReturnTypeException e) {
			throw new XmlMapException("Return type for method '"
					+ method.getName() + "' is not supported");
		}
	}

	private NodeConverter getNodeConverter(Type returnType)
			throws InvalidReturnTypeException {
		Class<?> cl = null;
		if (returnType instanceof Class) {
			cl = (Class<?>) returnType;
			if (cl.isArray()) {
				returnType = cl.getComponentType();
			}
		} else if (returnType instanceof ParameterizedType) {
			ParameterizedType pt = (ParameterizedType) returnType;
			Type[] typeArgs = pt.getActualTypeArguments();
			if (typeArgs.length != 1) {
				throw new InvalidReturnTypeException();
			}
			returnType = typeArgs[0];
		}
		if (returnType.equals(Integer.TYPE) || returnType.equals(Integer.class)) {
			return new IntConverter();
		} else if (returnType.equals(String.class)) {
			return new TextConverter();
		} else if (returnType instanceof Class) {
			cl = (Class<?>) returnType;
			if (cl.isInterface()) {
				ProxyFactory proxyFactory = proxyFactoryBuilder.build(cl);
				return new InterfaceConverter(cl, proxyFactory);
			}

		}
		throw new InvalidReturnTypeException();
	}

	private static CollectionType getCollectionType(Type returnType)
			throws InvalidReturnTypeException {
		if (returnType instanceof Class) {
			Class<?> cl = (Class<?>) returnType;
			if (cl.isArray()) {
				return CollectionType.ARRAY;
			} else {
				return CollectionType.NONE;
			}
		} else if (returnType instanceof ParameterizedType) {
			ParameterizedType pt = (ParameterizedType) returnType;
			Type rawType = pt.getRawType();
			if (rawType.equals(List.class)) {
				return CollectionType.LIST;
			} else if (rawType.equals(Set.class)) {
				return CollectionType.SET;
			}
		}
		throw new InvalidReturnTypeException();
	}

}
